{"version":3,"names":["_core","require","mergeVisitors","traverse","visitors","merge","throwError","path","buildCodeFrameError","controlFlowVisitor","FunctionParent","skip","SwitchStatement|Loop","_","state","break","add","continue","LabeledStatement","name","node","label","BreakStatement","_path$node$label$name","_path$node$label","has","ContinueStatement","_path$node$label$name2","_path$node$label2","ReturnStatement","returnPath","collectControlFlowStatements","Set","wrapDoExpressionInIIFE","DoExpression","body","length","replaceExpressionWithStatements","replaceWith","scope","buildUndefinedNode"],"sources":["../src/utils.ts"],"sourcesContent":["import type { NodePath, Visitor, types as t } from \"@babel/core\";\nimport { traverse } from \"@babel/core\";\nconst mergeVisitors = traverse.visitors.merge;\n\n// Wrap all do expressions in an IIFE.\n// This doesn't work with control flow statements like break/continue/return.\n// Only use this when the code is too hard to transform.\ninterface ControlFlowVisitorState {\n  break: Set<string | null>;\n  continue: Set<string | null>;\n  returnPath: NodePath<t.ReturnStatement> | null;\n}\n\nfunction throwError(path: NodePath) {\n  throw path.buildCodeFrameError(\n    \"This control flow escape from do expression is not supported.\",\n  );\n}\n\nconst controlFlowVisitor: Visitor<ControlFlowVisitorState> = {\n  FunctionParent(path) {\n    path.skip();\n  },\n  \"SwitchStatement|Loop\"(_, state) {\n    state.break.add(null);\n    state.continue.add(null);\n  },\n  LabeledStatement(path, state) {\n    const name = path.node.label.name;\n    state.break.add(name);\n  },\n  BreakStatement(path, state) {\n    if (!state.break.has(path.node.label?.name ?? null)) {\n      throwError(path);\n    }\n  },\n  ContinueStatement(path, state) {\n    if (!state.continue.has(path.node.label?.name ?? null)) {\n      throwError(path);\n    }\n  },\n  ReturnStatement(path, state) {\n    state.returnPath = path;\n  },\n};\n\nexport function collectControlFlowStatements(path: NodePath) {\n  const state: ControlFlowVisitorState = {\n    break: new Set<string | null>(),\n    continue: new Set<string | null>(),\n    returnPath: null,\n  };\n  path.traverse(controlFlowVisitor, state);\n  return state;\n}\n\nexport function wrapDoExpressionInIIFE(path: NodePath) {\n  const state: ControlFlowVisitorState = {\n    break: new Set<string | null>(),\n    continue: new Set<string | null>(),\n    returnPath: null,\n  };\n  path.traverse(\n    mergeVisitors([\n      {\n        DoExpression(path) {\n          const body = path.node.body.body;\n          if (body.length) {\n            path.replaceExpressionWithStatements(body);\n          } else {\n            path.replaceWith(path.scope.buildUndefinedNode());\n          }\n        },\n      },\n      controlFlowVisitor,\n    ]),\n    state,\n  );\n  if (state.returnPath) {\n    throwError(state.returnPath);\n  }\n}\n"],"mappings":"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","ignoreList":[]}